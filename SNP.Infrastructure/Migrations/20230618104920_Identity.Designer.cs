// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SNP.Infrastructure.Persistence;

#nullable disable

namespace SNP.Infrastructure.Migrations
{
    [DbContext(typeof(NewB2cContext))]
    [Migration("20230618104920_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("cityID");

                    b.Property<string>("Local")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("local");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<string>("Street")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("street");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Number" }, "AS_NonClusteredIndex-20190416-113235");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Number" }, "AS_NonClusteredIndex-20190416-113235"), 90);

                    b.HasIndex(new[] { "CityId" }, "AS_NonClusteredIndex-20190416-113256");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CityId" }, "AS_NonClusteredIndex-20190416-113256"), 90);

                    b.HasIndex(new[] { "Number", "CityId", "Street" }, "STA_Idx_Address_number_cityID_street_personId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Number", "CityId", "Street" }, "STA_Idx_Address_number_cityID_street_personId"), 90);

                    b.HasIndex(new[] { "PersonId" }, "idx_Person_notnull")
                        .IsUnique()
                        .HasFilter("([personId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "idx_Person_notnull"), 90);

                    b.ToTable("Address", null, t =>
                        {
                            t.HasTrigger("Address_dss_delete_trigger");

                            t.HasTrigger("Address_dss_insert_trigger");

                            t.HasTrigger("Address_dss_update_trigger");
                        });
                });

            modelBuilder.Entity("SNP.Domain.Entities.AddressDssTracking", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CreateScopeLocalId")
                        .HasColumnType("int")
                        .HasColumnName("create_scope_local_id");

                    b.Property<DateTime?>("LastChangeDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_change_datetime");

                    b.Property<int>("LocalCreatePeerKey")
                        .HasColumnType("int")
                        .HasColumnName("local_create_peer_key");

                    b.Property<long>("LocalCreatePeerTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("local_create_peer_timestamp");

                    b.Property<int>("LocalUpdatePeerKey")
                        .HasColumnType("int")
                        .HasColumnName("local_update_peer_key");

                    b.Property<byte[]>("LocalUpdatePeerTimestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("local_update_peer_timestamp");

                    b.Property<long?>("RestoreTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("restore_timestamp");

                    b.Property<int?>("ScopeCreatePeerKey")
                        .HasColumnType("int")
                        .HasColumnName("scope_create_peer_key");

                    b.Property<long?>("ScopeCreatePeerTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("scope_create_peer_timestamp");

                    b.Property<int?>("ScopeUpdatePeerKey")
                        .HasColumnType("int")
                        .HasColumnName("scope_update_peer_key");

                    b.Property<long?>("ScopeUpdatePeerTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("scope_update_peer_timestamp");

                    b.Property<int>("SyncRowIsTombstone")
                        .HasColumnType("int")
                        .HasColumnName("sync_row_is_tombstone");

                    b.Property<int?>("UpdateScopeLocalId")
                        .HasColumnType("int")
                        .HasColumnName("update_scope_local_id");

                    b.HasKey("Id")
                        .HasName("PK_DataSync.Address_dss_tracking");

                    b.ToTable("Address_dss_tracking", "DataSync");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Ammount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ammount");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("SNP.Domain.Entities.AssetEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssetDate")
                        .HasColumnType("datetime")
                        .HasColumnName("assetDate");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Desription")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("desription");

                    b.Property<int?>("EventsId")
                        .HasColumnType("int")
                        .HasColumnName("eventsId");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int?>("User1Id")
                        .HasColumnType("int")
                        .HasColumnName("user1Id");

                    b.Property<int?>("User2Id")
                        .HasColumnType("int")
                        .HasColumnName("user2Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventsId" }, "AS_NonClusteredIndex-20190417-151410");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EventsId" }, "AS_NonClusteredIndex-20190417-151410"), 90);

                    b.HasIndex(new[] { "User2Id", "User1Id" }, "missing_index_25_24");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "User2Id", "User1Id" }, "missing_index_25_24"), 90);

                    b.HasIndex(new[] { "User1Id", "User2Id" }, "missing_index_4_3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "User1Id", "User2Id" }, "missing_index_4_3"), 90);

                    b.ToTable("AssetEvents");
                });

            modelBuilder.Entity("SNP.Domain.Entities.BagsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iconName");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("isSystem");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("isVisible");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("BagsType", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<string>("Iban")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IBAN");

                    b.Property<string>("Nr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nr");

                    b.Property<string>("Swift")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SWIFT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Brainhint", b =>
                {
                    b.Property<string>("Expr1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("Kwota")
                        .HasColumnType("int")
                        .HasColumnName("kwota");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("PESEL")
                        .IsFixedLength();

                    b.Property<string>("Sha1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SHA1");

                    b.Property<string>("Signatures")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("signatures");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("stateID");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.ToTable((string)null);

                    b.ToView("brainhint", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int")
                        .HasColumnName("bankAccountId");

                    b.Property<decimal?>("BaseAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("baseAmount");

                    b.Property<int?>("CommitmentStateId")
                        .HasColumnType("int")
                        .HasColumnName("CommitmentStateID");

                    b.Property<int?>("ContractFilesId")
                        .HasColumnType("int")
                        .HasColumnName("contractFilesId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int?>("LeadingUserId")
                        .HasColumnType("int")
                        .HasColumnName("leadingUserId");

                    b.Property<string>("MandateNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("mandateNumber");

                    b.Property<decimal?>("Payments")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("payments");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<string>("Signatures")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("signatures");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("stateID");

                    b.Property<DateTime?>("TimeToDo")
                        .HasColumnType("datetime")
                        .HasColumnName("timeToDo");

                    b.Property<int?>("ToDoEventsId")
                        .HasColumnType("int")
                        .HasColumnName("toDoEventsId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CommitmentStateId");

                    b.HasIndex("ToDoEventsId");

                    b.HasIndex(new[] { "Signatures" }, "IX_CaseSignature");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Signatures" }, "IX_CaseSignature"), 90);

                    b.HasIndex(new[] { "PersonId" }, "NonClusteredIndex-20190416-062109");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "NonClusteredIndex-20190416-062109"), 90);

                    b.HasIndex(new[] { "LeadingUserId" }, "NonClusteredIndex-20190416-062228");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LeadingUserId" }, "NonClusteredIndex-20190416-062228"), 90);

                    b.HasIndex(new[] { "StateId" }, "STA_Idx_Case");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StateId" }, "STA_Idx_Case"), 90);

                    b.HasIndex(new[] { "UserId" }, "missing_index_537_536");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "missing_index_537_536"), 90);

                    b.HasIndex(new[] { "ContractFilesId" }, "missing_index_546_545");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractFilesId" }, "missing_index_546_545"), 90);

                    b.HasIndex(new[] { "ContractFilesId" }, "missing_index_9959_9958");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractFilesId" }, "missing_index_9959_9958"), 90);

                    b.ToTable("Case", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.CasesInBag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BagsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("bagsTypeId");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseID");

                    b.HasKey("Id");

                    b.HasIndex("BagsTypeId");

                    b.HasIndex("CaseId");

                    b.ToTable("CasesInBags");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CasesOfListOfCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("case_id");

                    b.Property<int?>("ListOfCasesId")
                        .HasColumnType("int")
                        .HasColumnName("listOfCases_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex(new[] { "ListOfCasesId" }, "missing_index_112_111");

                    b.ToTable("CasesOfListOfCases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Cities");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Name" }, "IX_Cities"), 90);

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<string>("BankAccountNr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bankAccountNr");

                    b.Property<int?>("ClientType")
                        .HasColumnType("int")
                        .HasColumnName("clientType");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fullName");

                    b.Property<string>("Krs")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("KRS");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("NazwaKontaDoWplaty")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("nazwaKontaDoWplaty");

                    b.Property<DateTime?>("NextTimeToDo")
                        .HasColumnType("datetime")
                        .HasColumnName("nextTimeToDo");

                    b.Property<string>("Nip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NIP");

                    b.Property<string>("Note")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("note");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("region");

                    b.Property<string>("Regon")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("regon");

                    b.Property<string>("RejestrName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rejestrName");

                    b.Property<string>("RejestrProwadzacy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rejestrProwadzacy");

                    b.Property<int?>("RejestrType")
                        .HasColumnType("int")
                        .HasColumnName("rejestrType");

                    b.Property<int?>("RekCount")
                        .HasColumnType("int")
                        .HasColumnName("rekCount");

                    b.Property<string>("ReturnBankAccountNr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("returnBankAccountNr");

                    b.Property<string>("ReturnBankOwner")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("returnBankOwner");

                    b.Property<string>("Siedziba")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("siedziba");

                    b.Property<int?>("ToDoEventsId")
                        .HasColumnType("int")
                        .HasColumnName("toDoEventsId");

                    b.Property<string>("ZipName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("zipName");

                    b.HasKey("Id");

                    b.HasIndex("ToDoEventsId");

                    b.HasIndex(new[] { "AddressId" }, "idx_Clients_notnull");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AddressId" }, "idx_Clients_notnull"), 90);

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("NIP")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContactsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("lastName");

                    b.Property<string>("Nip")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("NIP")
                        .IsFixedLength();

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("note");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("PESEL")
                        .IsFixedLength();

                    b.Property<string>("SecoundName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("secoundName");

                    b.HasKey("Id")
                        .HasName("PK_Contacts");

                    b.HasIndex(new[] { "LastName" }, "IX_ContactsDetail");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LastName" }, "IX_ContactsDetail"), 90);

                    b.HasIndex(new[] { "Pesel" }, "IX_ContactsDetail_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Pesel" }, "IX_ContactsDetail_2"), 90);

                    b.HasIndex(new[] { "FirstName" }, "IX_ContactsDetail_3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FirstName" }, "IX_ContactsDetail_3"), 90);

                    b.HasIndex(new[] { "Pesel" }, "STA_Idx_PESEL");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Pesel" }, "STA_Idx_PESEL"), 90);

                    b.HasIndex(new[] { "PersonId" }, "idx_ContactsDetail_notnull")
                        .IsUnique()
                        .HasFilter("([personId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "idx_ContactsDetail_notnull"), 90);

                    b.ToTable("ContactsDetail", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContatsOfClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("position");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex(new[] { "PersonId" }, "idx_ContatsOfClient_notnull")
                        .IsUnique()
                        .HasFilter("([personId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "idx_ContatsOfClient_notnull"), 90);

                    b.ToTable("ContatsOfClient", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aprefix")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("aprefix");

                    b.Property<string>("BankAcount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bankAcount");

                    b.Property<string>("CarierName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("carierName");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("companyId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("InterstShift")
                        .HasColumnType("int")
                        .HasColumnName("interstShift");

                    b.Property<decimal?>("Koszt")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("koszt");

                    b.Property<decimal?>("KwotaZakupu")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kwotaZakupu");

                    b.Property<decimal?>("MaxPayments")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("maxPayments");

                    b.Property<decimal?>("NaleznoscGlowna")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("naleznoscGlowna");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("NazwaKodowa")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nazwaKodowa");

                    b.Property<string>("NazwaKontaDoWplaty")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("nazwaKontaDoWplaty");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percentage");

                    b.Property<decimal?>("Percentage3")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("percentage3");

                    b.Property<string>("PostAuthor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("postAuthor");

                    b.Property<int?>("RaportTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("raportTemplateId");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("date")
                        .HasColumnName("terminationDate");

                    b.Property<int?>("TerminationDay")
                        .HasColumnType("int")
                        .HasColumnName("terminationDay");

                    b.Property<decimal?>("TerminationPercange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("terminationPercange");

                    b.Property<string>("ThumabailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("thumabailId");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("WindykacjOdsetki")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("windykacjOdsetki")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContratsFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommisionType")
                        .HasColumnType("int")
                        .HasColumnName("commisionType");

                    b.Property<decimal?>("CommisionValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("commisionValue");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("contractId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("date")
                        .HasColumnName("dateReturned");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContratsFiles");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CustomBagsNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BagsId")
                        .HasColumnType("int")
                        .HasColumnName("bagsId");

                    b.Property<int?>("DefaultNotesId")
                        .HasColumnType("int")
                        .HasColumnName("defaultNotesId");

                    b.HasKey("Id");

                    b.HasIndex("BagsId");

                    b.HasIndex("DefaultNotesId");

                    b.ToTable("CustomBagsNotes");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CustomListOfCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("CustomListOfCases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Czynnosci", b =>
                {
                    b.Property<string>("Column2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 2");

                    b.Property<string>("Osoba")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("osoba");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.ToTable("Czynnosci", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictCaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DictCaseState", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictCommisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DictCommisionType", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictDefaultNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DictDefaultNotes");
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iconName");

                    b.Property<bool?>("IsSystemEvent")
                        .HasColumnType("bit")
                        .HasColumnName("isSystemEvent");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DictEventType", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictStateOfCommitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DictStateOfCommitment", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.DoKrd", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Do KRD", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Dopoprawienium", b =>
                {
                    b.Property<string>("Kwotabazowa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Neelementu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Dopoprawienia");
                });

            modelBuilder.Entity("SNP.Domain.Entities.DynamicalCaseParametr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<int?>("FineId")
                        .HasColumnType("int")
                        .HasColumnName("fineId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex(new[] { "FineId" }, "AS_NonClusteredIndex-20190416-110330");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "FineId" }, "AS_NonClusteredIndex-20190416-110330"), 90);

                    b.HasIndex(new[] { "Name" }, "STA_Idx_DynamicalCaseParametr_value_fineId");

                    b.ToTable("DynamicalCaseParametr", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("emailContent");

                    b.Property<string>("EmailFrom")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailFrom");

                    b.Property<int?>("EmailId")
                        .HasColumnType("int")
                        .HasColumnName("emailId");

                    b.Property<string>("EmailTo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("emailTo");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<bool?>("IsReaded")
                        .HasColumnType("bit")
                        .HasColumnName("isReaded");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<DateTime?>("ReciveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("reciveDate");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sendDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int?>("Uid")
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK_Emails_1");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonId");

                    b.HasIndex(new[] { "UserId" }, "missing_index_12_11");

                    b.HasIndex(new[] { "Status", "SendDate" }, "missing_index_2_1");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EmailsAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.HasKey("Id")
                        .HasName("PK_Emails");

                    b.HasIndex(new[] { "PersonId" }, "AS_NonClusteredIndex-20190417-140535");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "AS_NonClusteredIndex-20190417-140535"), 90);

                    b.HasIndex(new[] { "Email" }, "IX_EmailsAddresses");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Email" }, "IX_EmailsAddresses"), 90);

                    b.ToTable("EmailsAddresses");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Encryption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<int?>("EncrytipnApId")
                        .HasColumnType("int")
                        .HasColumnName("encrytipnApId");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EncrytipnApId");

                    b.ToTable("encryption", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.EncryptionApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("ParametersDec")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("parametersDec");

                    b.Property<string>("ParametersEnc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("parametersEnc");

                    b.Property<string>("Path")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.ToTable("EncryptionApplication", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.EnforcementBailiff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<string>("EnforcmentSignature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("enforcmentSignature");

                    b.Property<decimal?>("Kze")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kze");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CaseId" }, "idx_EnforcementBailiff_notnull")
                        .IsUnique()
                        .HasFilter("([caseId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "idx_EnforcementBailiff_notnull"), 90);

                    b.ToTable("EnforcementBailiff", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.EpuCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<int?>("EpuState")
                        .HasColumnType("int")
                        .HasColumnName("epuState");

                    b.Property<int?>("EsadId")
                        .HasColumnType("int")
                        .HasColumnName("esadId");

                    b.HasKey("Id")
                        .HasName("PK_EpuCase_1");

                    b.HasIndex(new[] { "EsadId" }, "idx_EpuCase2_notnull")
                        .IsUnique()
                        .HasFilter("([esadId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EsadId" }, "idx_EpuCase2_notnull"), 90);

                    b.HasIndex(new[] { "CaseId" }, "idx_EpuCase_notnull")
                        .IsUnique()
                        .HasFilter("([caseId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "idx_EpuCase_notnull"), 90);

                    b.ToTable("EpuCase", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.EpuDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("date")
                        .HasColumnName("dateReturned");

                    b.Property<int?>("EpuCaseId")
                        .HasColumnType("int")
                        .HasColumnName("epuCaseId");

                    b.Property<int?>("EvantId")
                        .HasColumnType("int")
                        .HasColumnName("evantId");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("EpuCaseId");

                    b.HasIndex(new[] { "EvantId" }, "idx_EpuDecisions_notnull")
                        .IsUnique()
                        .HasFilter("([evantId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EvantId" }, "idx_EpuDecisions_notnull"), 90);

                    b.ToTable("EpuDecisions");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("Direction")
                        .HasColumnType("int")
                        .HasColumnName("direction");

                    b.Property<string>("Header")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("header");

                    b.Property<int?>("LastAsset")
                        .HasColumnType("int")
                        .HasColumnName("lastAsset");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<bool?>("Planed")
                        .HasColumnType("bit")
                        .HasColumnName("planed");

                    b.Property<string>("Text")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("text");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("LastAsset");

                    b.HasIndex(new[] { "PersonId" }, "AS_NonClusteredIndex-20190416-110510");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "AS_NonClusteredIndex-20190416-110510"), 90);

                    b.HasIndex(new[] { "ClientId" }, "AS_NonClusteredIndex-20190417-101708");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ClientId" }, "AS_NonClusteredIndex-20190417-101708"), 90);

                    b.HasIndex(new[] { "UserId" }, "NonClusteredIndex-20190416-062628");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "NonClusteredIndex-20190416-062628"), 90);

                    b.HasIndex(new[] { "CaseId" }, "NonClusteredIndex-20190416-062650");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "NonClusteredIndex-20190416-062650"), 90);

                    b.HasIndex(new[] { "Direction", "Planed", "UserId", "TypeId", "Time" }, "missing_index_541_540");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EventsForInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("EventsForInvoice", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.EventsOfAgrement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgrrementId")
                        .HasColumnType("int")
                        .HasColumnName("agrrementId");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.HasKey("Id");

                    b.HasIndex("AgrrementId");

                    b.HasIndex("EventId");

                    b.ToTable("EventsOfAgrement", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Eventsbac", b =>
                {
                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("Direction")
                        .HasColumnType("int")
                        .HasColumnName("direction");

                    b.Property<string>("Header")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("header");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("LastAsset")
                        .HasColumnType("int")
                        .HasColumnName("lastAsset");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<bool?>("Planed")
                        .HasColumnType("bit")
                        .HasColumnName("planed");

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("text");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime")
                        .HasColumnName("time");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.ToTable("Eventsbac", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("int")
                        .HasColumnName("fileTypeId");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iconName");

                    b.Property<bool?>("IsEncrypted")
                        .HasColumnType("bit")
                        .HasColumnName("isEncrypted");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<int?>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("fileId");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex(new[] { "CaseId" }, "AS_NonClusteredIndex-20190416-110937");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "AS_NonClusteredIndex-20190416-110937"), 90);

                    b.ToTable("FilesOfCase", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("clientId");

                    b.Property<int?>("FilesId")
                        .HasColumnType("int")
                        .HasColumnName("filesId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FilesId");

                    b.ToTable("FilesOfClient", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfEent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<int?>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("fileId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FileId");

                    b.ToTable("FilesOfEents");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmailId")
                        .HasColumnType("int")
                        .HasColumnName("emailId");

                    b.Property<int?>("FilesId")
                        .HasColumnType("int")
                        .HasColumnName("filesId");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("FilesId");

                    b.ToTable("FilesOfEmails");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Ammount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ammount");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int?>("InKrd")
                        .HasColumnType("int")
                        .HasColumnName("inKRD");

                    b.Property<decimal?>("Interst")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("interst");

                    b.Property<decimal?>("Koszty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("koszty");

                    b.Property<decimal?>("LesAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("lesAmount");

                    b.Property<decimal?>("LesInterst")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("lesInterst");

                    b.Property<decimal?>("LesKoszty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("lesKoszty");

                    b.Property<string>("Nr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nr");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nr" }, "AS_NonClusteredIndex-20190416-110030");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Nr" }, "AS_NonClusteredIndex-20190416-110030"), 90);

                    b.HasIndex(new[] { "CaseId" }, "NonClusteredIndex-20190416-061859");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "NonClusteredIndex-20190416-061859"), 90);

                    b.ToTable("Fine", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Fine1", b =>
                {
                    b.Property<decimal?>("CaseAmmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("case_ammount");

                    b.Property<string>("CaseSignature")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("case_signature");

                    b.Property<decimal?>("MandatAmmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("mandat_ammount");

                    b.Property<int>("MandatId")
                        .HasColumnType("int")
                        .HasColumnName("mandat_id");

                    b.Property<decimal?>("MandatKoszty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("mandat_koszty");

                    b.Property<decimal?>("MandatOdsetki")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("mandat_odsetki");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<decimal?>("PaymAmmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("paym_ammount");

                    b.Property<decimal?>("PaymKoszty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("paym_koszty");

                    b.Property<decimal?>("PaymOdsetki")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("paym_odsetki");

                    b.Property<string>("Sha1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SHA1");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.ToTable((string)null);

                    b.ToView("fines", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Gapowicze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<DateTime?>("DateAdd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdd");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("gapowicze", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContratId")
                        .HasColumnType("int")
                        .HasColumnName("contratID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateOfPayment")
                        .HasColumnType("date")
                        .HasColumnName("dateOfPayment");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventID");

                    b.Property<string>("Nr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nr");

                    b.HasKey("Id");

                    b.HasIndex("ContratId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("SNP.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Ammount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ammount");

                    b.Property<int?>("Count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<decimal?>("FullAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("fullAmount");

                    b.Property<int?>("InoiceId")
                        .HasColumnType("int")
                        .HasColumnName("inoiceId");

                    b.Property<int?>("Nr")
                        .HasColumnType("int")
                        .HasColumnName("nr");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("tax");

                    b.Property<int?>("TaxRate")
                        .HasColumnType("int")
                        .HasColumnName("taxRate");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("InoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Krd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseID");

                    b.Property<DateTime?>("DateAdd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdd");

                    b.Property<DateTime?>("DateDel")
                        .HasColumnType("datetime")
                        .HasColumnName("dateDel");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsFromOldKrd")
                        .HasColumnType("bit")
                        .HasColumnName("isFromOldKRD");

                    b.Property<string>("KrdGuid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("krdGuid");

                    b.Property<string>("KrdId")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("krdId");

                    b.Property<string>("Krdlogin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("krdlogin");

                    b.Property<DateTime?>("SendDocumentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sendDocumentDate");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("PK_KRDNew");

                    b.HasIndex(new[] { "CaseId", "State" }, "missing_index_2_1");

                    b.ToTable("KRD", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.KrdOld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<DateTime?>("DateAdd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAdd");

                    b.Property<DateTime?>("DateDel")
                        .HasColumnType("datetime")
                        .HasColumnName("dateDel");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("KrdGuid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("krdGuid");

                    b.Property<int?>("KrdId")
                        .HasColumnType("int")
                        .HasColumnName("krdID");

                    b.Property<DateTime?>("SendDocumentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sendDocumentDate");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("PK_KRD");

                    b.HasIndex("CaseId");

                    b.ToTable("KRD_OLD", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Lista3", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("lista3", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Lista4", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pesel");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.ToTable("lista4", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Lista5", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("lista5", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Lista6", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pesel");

                    b.Property<string>("Signatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("signatura");

                    b.ToTable("lista6", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Lista7", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Signature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("lista7", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Listape", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pesel");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.ToTable("listapes", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.MappingZipCodeToDistrict", b =>
                {
                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("MappingZipCodeToDistrict", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.MappingZipCodeToDistrictOld", b =>
                {
                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("MappingZipCodeToDistrict_old", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Mytesttable", b =>
                {
                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<int?>("Rollno")
                        .HasColumnType("int")
                        .HasColumnName("rollno");

                    b.ToTable("mytesttable", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Mytesttable1", b =>
                {
                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<int?>("Rollno")
                        .HasColumnType("int")
                        .HasColumnName("rollno");

                    b.ToTable("mytesttable1", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.NowePrzydzialkolor", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data");

                    b.Property<string>("Kolor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kolor");

                    b.Property<string>("Przydzial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("przydzial");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.ToTable("nowePrzydzialkolor", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.NowePrzydzialy", b =>
                {
                    b.Property<string>("Column0")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Column1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Column2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("nowePrzydzialy", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.NowePrzydzialyOd18062015", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data");

                    b.Property<string>("DataKlauzula")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dataKlauzula");

                    b.Property<string>("DataOzreczenia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dataOzreczenia");

                    b.Property<string>("DataPopelnieniaCzynu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dataPopelnieniaCzynu");

                    b.Property<string>("DataPrawomoc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dataPrawomoc");

                    b.Property<string>("DniBezOdsetkowe")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dniBezOdsetkowe");

                    b.Property<string>("IdNakazu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("idNakazu");

                    b.Property<string>("IdPliku")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_pliku");

                    b.Property<string>("IdSprawy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_sprawy");

                    b.Property<string>("ImieNazwisko")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Imie_Nazwisko");

                    b.Property<string>("Kod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kod");

                    b.Property<string>("KodDecyzji")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kodDecyzji");

                    b.Property<string>("Kolor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kolor");

                    b.Property<string>("KosztyZastepstwaEgzekucyjnego")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KosztyZastepstwaProcesowego")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kosztyZastepstwaProcesowego");

                    b.Property<string>("Kwota1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kwota1");

                    b.Property<string>("Kwota2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kwota2");

                    b.Property<string>("Kwota3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kwota3");

                    b.Property<string>("Kwota4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kwota4");

                    b.Property<string>("KwotaPozostalaDoZaplaty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kwotaPozostalaDoZaplaty");

                    b.Property<string>("Miasto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("miasto");

                    b.Property<string>("NrKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nr_konta");

                    b.Property<string>("NrMandatu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nr_mandatu");

                    b.Property<string>("Numer")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numer");

                    b.Property<string>("OplataSadowa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("oplataSadowa");

                    b.Property<string>("ProwadzacySprawe")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowadzacySprawe");

                    b.Property<string>("Przydzial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("przydzial");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.Property<string>("SygnaturaNakazuZaplaty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnaturaNakazuZaplaty");

                    b.Property<string>("SygnaturaPostepowaniaEgzekucyjnego")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tel");

                    b.Property<string>("Ulica")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ulica");

                    b.Property<string>("Wplata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wplata");

                    b.Property<string>("Zaliczki")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zaliczki");

                    b.ToTable("nowePrzydzialyOd18062015", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Odsetki", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(14, 4)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("Odsetki", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.P", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("p", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountIn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountIn");

                    b.Property<string>("AccountOut")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountOut");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<bool?>("IsPlaned")
                        .HasColumnType("bit")
                        .HasColumnName("isPlaned");

                    b.Property<string>("Recipient")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("recipient");

                    b.Property<string>("Sender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sender");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "idx_Payments_notnull")
                        .IsUnique()
                        .HasFilter("([eventId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EventId" }, "idx_Payments_notnull"), 90);

                    b.HasIndex(new[] { "IsPlaned", "Date" }, "missing_index_9944_9943");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IsPlaned", "Date" }, "missing_index_9944_9943"), 90);

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SNP.Domain.Entities.PaymentsForFine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Ammount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ammount");

                    b.Property<int?>("FineId")
                        .HasColumnType("int")
                        .HasColumnName("fineId");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("interest");

                    b.Property<decimal?>("Koszty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("koszty");

                    b.Property<int?>("PaymentsId")
                        .HasColumnType("int")
                        .HasColumnName("paymentsId");

                    b.HasKey("Id");

                    b.HasIndex("FineId");

                    b.HasIndex("PaymentsId");

                    b.ToTable("PaymentsForFine", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pe", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Signatyres")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("signatyres");

                    b.ToTable("pes", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsReturned")
                        .HasColumnType("bit")
                        .HasColumnName("isReturned");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("datetime")
                        .HasColumnName("nextDate");

                    b.Property<int?>("PastPersonId")
                        .HasColumnType("int")
                        .HasColumnName("pastPersonId");

                    b.Property<string>("Sha1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SHA1");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("PastPersonId");

                    b.HasIndex(new[] { "Sha1" }, "IX_Persons");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Sha1" }, "IX_Persons"), 90);

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pes2", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("pes2", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pesel", b =>
                {
                    b.Property<string>("Pesel1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("pesel", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.PeseleN", b =>
                {
                    b.Property<string>("KodPocztowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Kod pocztowy");

                    b.Property<string>("KwotaPoKomorniku")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Kwota po komorniku");

                    b.Property<string>("Miejscowość")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NazwaDłużnika")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nazwa dłużnika");

                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numer konta");

                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PESEL");

                    b.Property<string>("SumaOdsetek")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Suma odsetek");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Tytułem")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ulica")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WPS")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W P S ");

                    b.Property<string>("WPSSumaOdsetek")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W P S  + suma odsetek");

                    b.ToTable("peseleN", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pezypisane30112018", b =>
                {
                    b.Property<string>("IdSprawy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ID sprawy");

                    b.Property<string>("NowyProwadzacy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nowy prowadzacy");

                    b.Property<string>("StaryProwadzacy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("stary prowadzacy");

                    b.ToTable("pezypisane_30_11_2018", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PersonId" }, "AS_NonClusteredIndex-20190417-140433");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PersonId" }, "AS_NonClusteredIndex-20190417-140433"), 90);

                    b.HasIndex(new[] { "Number" }, "IX_PhoneNumbers");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Number" }, "IX_PhoneNumbers"), 90);

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pko", b =>
                {
                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseID");

                    b.Property<int?>("IdAkt")
                        .HasColumnType("int")
                        .HasColumnName("idAkt");

                    b.Property<int?>("IdPodmiotu")
                        .HasColumnType("int")
                        .HasColumnName("idPodmiotu");

                    b.Property<DateTime?>("PrzekazanaOd")
                        .HasColumnType("datetime")
                        .HasColumnName("przekazanaOd");

                    b.HasIndex(new[] { "IdAkt" }, "IX_PKOes")
                        .IsUnique()
                        .HasFilter("[idAkt] IS NOT NULL");

                    b.HasIndex(new[] { "IdPodmiotu" }, "IX_PKOes_1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "IdPodmiotu" }, "IX_PKOes_1"), 90);

                    b.HasIndex(new[] { "PrzekazanaOd" }, "IX_PKOes_2");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PrzekazanaOd" }, "IX_PKOes_2"), 90);

                    b.HasIndex(new[] { "CaseId" }, "NonClusteredIndex-20170126-080044");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "NonClusteredIndex-20170126-080044"), 90);

                    b.ToTable("PKOes", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.PkpintercitySyg", b =>
                {
                    b.Property<string>("Column1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 1");

                    b.Property<string>("Column10")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 10");

                    b.Property<string>("Column11")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 11");

                    b.Property<string>("Column12")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 12");

                    b.Property<string>("Column2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 2");

                    b.Property<string>("Column3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 3");

                    b.Property<string>("Column4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 4");

                    b.Property<string>("Column5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 5");

                    b.Property<string>("Column6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 6");

                    b.Property<string>("Column7")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 7");

                    b.Property<string>("Column8")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 8");

                    b.Property<string>("Column9")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 9");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("pkpintercity_syg", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Podzial2", b =>
                {
                    b.Property<string>("Nowy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nowy");

                    b.Property<string>("Prowadzący")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("podzial2", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Postanowienium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseID");

                    b.Property<DateTime?>("DataOrzeczenia")
                        .HasColumnType("datetime")
                        .HasColumnName("dataOrzeczenia");

                    b.Property<string>("DataWplywu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dataWplywu");

                    b.Property<string>("Dokument")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("dokument");

                    b.Property<int?>("EpuId")
                        .HasColumnType("int")
                        .HasColumnName("epuID");

                    b.Property<string>("NazwaDecyzji")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nazwaDecyzji");

                    b.Property<string>("Powod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("powod");

                    b.Property<string>("Pozwany")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pozwany");

                    b.Property<string>("Sad")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sad");

                    b.Property<string>("Sedzia")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sedzia");

                    b.Property<string>("SiganturePow")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("siganturePow");

                    b.Property<string>("Signature")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("signature");

                    b.Property<int?>("StatPostanowienia")
                        .HasColumnType("int")
                        .HasColumnName("statPostanowienia");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status");

                    b.Property<string>("ToDoComment")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("toDoComment");

                    b.Property<DateTime?>("ToDoDate")
                        .HasColumnType("datetime")
                        .HasColumnName("toDoDate");

                    b.Property<string>("Tresc")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("tresc");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Postanowienia");
                });

            modelBuilder.Entity("SNP.Domain.Entities.PowerbiOdzyskiNowePortfele", b =>
                {
                    b.Property<DateTime?>("DataWplaty")
                        .HasColumnType("datetime")
                        .HasColumnName("Data wplaty");

                    b.Property<decimal?>("Kwota")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("NazwaPakietu")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Nazwa pakietu");

                    b.Property<string>("NumerSprawyWCrm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Numer sprawy w CRM");

                    b.ToTable((string)null);

                    b.ToView("powerbi_odzyskiNowePortfele", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.PowerbiOdzyskiStarePortfele", b =>
                {
                    b.Property<DateTime?>("DataWplaty")
                        .HasColumnType("datetime")
                        .HasColumnName("Data wplaty");

                    b.Property<decimal?>("Kwota")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("NazwaPakietu")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Nazwa pakietu");

                    b.Property<string>("NumerSprawyWCrm")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Numer sprawy w CRM");

                    b.ToTable((string)null);

                    b.ToView("powerbi_odzyskiStarePortfele", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.PowerbiV1WplatyNaZlecenie", b =>
                {
                    b.Property<DateTime?>("DataWplaty")
                        .HasColumnType("datetime")
                        .HasColumnName("Data wplaty");

                    b.Property<DateTime?>("DataWystawienia")
                        .HasColumnType("datetime")
                        .HasColumnName("Data wystawienia");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("IdKlienta")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Id klienta");

                    b.Property<int?>("IloscDniDoPrzedawnienia")
                        .HasColumnType("int")
                        .HasColumnName("Ilosc dni do przedawnienia");

                    b.Property<decimal?>("KwotaWpłaty")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Kwota wpłaty");

                    b.Property<string>("NazwaPakietu")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Nazwa pakietu");

                    b.Property<decimal?>("ProwizjaDlaNieprzedawnionych")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Prowizja dla nieprzedawnionych");

                    b.Property<decimal?>("ProwizjaDlaPrzedawnionych")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Prowizja dla przedawnionych");

                    b.ToTable((string)null);

                    b.ToView("powerbi_v1_wplatyNaZlecenie", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Projectpoland", b =>
                {
                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Expr1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("Kwota")
                        .HasColumnType("int")
                        .HasColumnName("kwota");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("PESEL")
                        .IsFixedLength();

                    b.Property<string>("Sha1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SHA1");

                    b.Property<string>("Signatures")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("signatures");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("stateID");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.ToTable((string)null);

                    b.ToView("projectpoland", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.ProvisionMarkerDss", b =>
                {
                    b.Property<int>("OwnerScopeLocalId")
                        .HasColumnType("int")
                        .HasColumnName("owner_scope_local_id");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("object_id");

                    b.Property<DateTime?>("ProvisionDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("provision_datetime");

                    b.Property<int>("ProvisionLocalPeerKey")
                        .HasColumnType("int")
                        .HasColumnName("provision_local_peer_key");

                    b.Property<int?>("ProvisionScopeLocalId")
                        .HasColumnType("int")
                        .HasColumnName("provision_scope_local_id");

                    b.Property<int?>("ProvisionScopePeerKey")
                        .HasColumnType("int")
                        .HasColumnName("provision_scope_peer_key");

                    b.Property<long?>("ProvisionScopePeerTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("provision_scope_peer_timestamp");

                    b.Property<long>("ProvisionTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("provision_timestamp");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version");

                    b.HasKey("OwnerScopeLocalId", "ObjectId")
                        .HasName("PK_DataSync.provision_marker_dss");

                    b.ToTable("provision_marker_dss", "DataSync");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Przewozy", b =>
                {
                    b.Property<string>("Koszty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TytuEm")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tytuem");

                    b.ToTable("przewozy", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Przyd30062015", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data");

                    b.Property<string>("Ids")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ids");

                    b.Property<string>("Kolorem")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kolorem");

                    b.Property<string>("Komu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("komu");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.Property<string>("Uzytkownik")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("uzytkownik");

                    b.ToTable("przyd30_06_2015", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Przyd300620151422", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data");

                    b.Property<string>("Ids")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ids");

                    b.Property<string>("Kolorem")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("kolorem");

                    b.Property<string>("Komu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("komu");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.Property<string>("Uzytkownik")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("uzytkownik");

                    b.ToTable("przyd30_06_2015_14_22", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Przydzialy", b =>
                {
                    b.Property<string>("Komu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("komu");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sygnatura");

                    b.Property<string>("_20150717000000000")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("2015-07-17 00 00 00 000");

                    b.ToTable("Przydzialy", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pub11", b =>
                {
                    b.Property<DateTime?>("Dku")
                        .HasColumnType("datetime")
                        .HasColumnName("dku");

                    b.Property<DateTime?>("Dzw")
                        .HasColumnType("datetime")
                        .HasColumnName("dzw");

                    b.Property<decimal?>("Idodp")
                        .HasColumnType("numeric(18, 0)")
                        .HasColumnName("idodp");

                    b.Property<string>("Koszt")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("koszt");

                    b.Property<string>("Mxp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mxp");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("nazwa");

                    b.Property<float?>("Prowizja")
                        .HasColumnType("real")
                        .HasColumnName("prowizja");

                    b.Property<float?>("Prowizja2")
                        .HasColumnType("real")
                        .HasColumnName("prowizja2");

                    b.Property<float?>("Prowizja3")
                        .HasColumnType("real")
                        .HasColumnName("prowizja3");

                    b.Property<string>("Wzob")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wzob");

                    b.Property<string>("Wzon")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("wzon");

                    b.ToTable("pub11", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pub2", b =>
                {
                    b.Property<string>("Column2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 2");

                    b.Property<string>("Column3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 3");

                    b.Property<string>("Column5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 5");

                    b.Property<string>("Column6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 6");

                    b.Property<string>("Dku")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dku");

                    b.Property<DateTime?>("Dtt")
                        .HasColumnType("datetime")
                        .HasColumnName("dtt");

                    b.Property<DateTime?>("Dtt1")
                        .HasColumnType("datetime")
                        .HasColumnName("dtt1");

                    b.Property<string>("Dzw")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dzw");

                    b.Property<float?>("Koszt")
                        .HasColumnType("real")
                        .HasColumnName("koszt");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nazwa");

                    b.ToTable("pub2", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pub22", b =>
                {
                    b.Property<string>("Column2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 2");

                    b.Property<string>("Column3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 3");

                    b.Property<string>("Column5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 5");

                    b.Property<string>("Column6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Column 6");

                    b.Property<string>("Dku")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dku");

                    b.Property<DateTime?>("Dtt")
                        .HasColumnType("datetime")
                        .HasColumnName("dtt");

                    b.Property<DateTime?>("Dtt1")
                        .HasColumnType("datetime")
                        .HasColumnName("dtt1");

                    b.Property<string>("Dzw")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dzw");

                    b.Property<float?>("Koszt")
                        .HasColumnType("real")
                        .HasColumnName("koszt");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("nazwa");

                    b.ToTable("pub22", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pw2", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Kod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KosztySądowe")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Koszty sądowe");

                    b.Property<string>("Kwota")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Miejscowość")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NazwiskoIImię")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nazwisko i imię");

                    b.Property<string>("NrElementuSprawy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nr elementu sprawy");

                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numer Konta");

                    b.Property<string>("Psygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PSygnatura");

                    b.Property<string>("Ulica")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("pw2", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pw3", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Kod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KosztySądowe")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Koszty sądowe");

                    b.Property<string>("Kwota")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Miejscowość")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NazwiskoIImię")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nazwisko i imię");

                    b.Property<string>("NrElementuSprawy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nr elementu sprawy");

                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numer Konta");

                    b.Property<string>("Psygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PSygnatura");

                    b.Property<string>("Ulica")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("pw3", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Reprezentacja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastName");

                    b.Property<string>("LocalNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("localNumber");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("name");

                    b.Property<string>("Nip")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NIP");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<string>("Pesel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PESEL");

                    b.Property<string>("SecoundName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("street");

                    b.Property<string>("Umocowanie")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("umocowanie");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zip");

                    b.Property<string>("ZipName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("zipName");

                    b.HasKey("Id");

                    b.ToTable("Reprezentacja", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.RequestsCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AmmountOfTheFullCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ammountOfTheFullCost");

                    b.Property<decimal?>("AmountOnRequest")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amountOnRequest");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<decimal?>("Interst")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("interst");

                    b.Property<decimal?>("Kek")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kek");

                    b.Property<decimal?>("Kos")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kos");

                    b.Property<decimal?>("Kpe")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kpe");

                    b.Property<decimal?>("Kpp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kpp");

                    b.Property<decimal?>("Kps")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kps");

                    b.Property<decimal?>("Kzp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kzp");

                    b.Property<int?>("RequestPaymentsId")
                        .HasColumnType("int")
                        .HasColumnName("requestPaymentsId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RequestPaymentsId" }, "AS_NonClusteredIndex-20190416-110613");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "RequestPaymentsId" }, "AS_NonClusteredIndex-20190416-110613"), 90);

                    b.HasIndex(new[] { "CaseId" }, "AS_NonClusteredIndex-20190416-113400");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "AS_NonClusteredIndex-20190416-113400"), 90);

                    b.HasIndex(new[] { "EventId" }, "idx_RequestsCase_notnull")
                        .IsUnique()
                        .HasFilter("([eventId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EventId" }, "idx_RequestsCase_notnull"), 90);

                    b.ToTable("RequestsCase", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.RequestsPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAcountNr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bankAcountNr");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateOfPayment")
                        .HasColumnType("date")
                        .HasColumnName("dateOfPayment");

                    b.Property<int?>("Nr")
                        .HasColumnType("int")
                        .HasColumnName("nr");

                    b.Property<string>("Signature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("signature");

                    b.Property<string>("Title")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Signature" }, "NonClusteredIndex-20190509-122421");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Signature" }, "NonClusteredIndex-20190509-122421"), 90);

                    b.ToTable("RequestsPayments");
                });

            modelBuilder.Entity("SNP.Domain.Entities.SchemaInfoDss", b =>
                {
                    b.Property<int>("SchemaMajorVersion")
                        .HasColumnType("int")
                        .HasColumnName("schema_major_version");

                    b.Property<int>("SchemaMinorVersion")
                        .HasColumnType("int")
                        .HasColumnName("schema_minor_version");

                    b.Property<string>("SchemaExtendedInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("schema_extended_info");

                    b.HasKey("SchemaMajorVersion", "SchemaMinorVersion")
                        .HasName("PK_DataSync.schema_info_dss");

                    b.ToTable("schema_info_dss", "DataSync");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ScopeConfigDss", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("config_id");

                    b.Property<string>("ConfigData")
                        .IsRequired()
                        .HasColumnType("xml")
                        .HasColumnName("config_data");

                    b.Property<string>("ScopeStatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("scope_status")
                        .IsFixedLength();

                    b.HasKey("ConfigId")
                        .HasName("PK_DataSync.scope_config_dss");

                    b.ToTable("scope_config_dss", "DataSync");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ScopeInfoDss", b =>
                {
                    b.Property<string>("SyncScopeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sync_scope_name");

                    b.Property<Guid?>("ScopeConfigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scope_config_id");

                    b.Property<Guid>("ScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("scope_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ScopeLocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scope_local_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScopeLocalId"));

                    b.Property<int>("ScopeRestoreCount")
                        .HasColumnType("int")
                        .HasColumnName("scope_restore_count");

                    b.Property<byte[]>("ScopeSyncKnowledge")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("scope_sync_knowledge");

                    b.Property<byte[]>("ScopeTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("scope_timestamp");

                    b.Property<byte[]>("ScopeTombstoneCleanupKnowledge")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("scope_tombstone_cleanup_knowledge");

                    b.Property<string>("ScopeUserComment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("scope_user_comment");

                    b.HasKey("SyncScopeName")
                        .HasName("PK_DataSync.scope_info_dss");

                    b.ToTable("scope_info_dss", "DataSync");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Signature", b =>
                {
                    b.Property<decimal?>("CaseAmmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("case_ammount");

                    b.Property<string>("CaseSignature")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("case_signature");

                    b.Property<DateTime?>("DataPodpUmowy")
                        .HasColumnType("date")
                        .HasColumnName("data_podp_umowy");

                    b.Property<string>("FineIds")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("FineIDs");

                    b.Property<string>("Mandaty")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("mandaty");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<decimal?>("PaymAmmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("paym_ammount");

                    b.Property<DateTime?>("PaymDate")
                        .HasColumnType("datetime")
                        .HasColumnName("paym_date");

                    b.Property<decimal?>("RequestAmmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Sha")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SHA");

                    b.Property<string>("Signature1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("signature");

                    b.Property<int?>("Stateid")
                        .HasColumnType("int")
                        .HasColumnName("stateid");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip");

                    b.ToTable((string)null);

                    b.ToView("signatures", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Sm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("contents");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateSended")
                        .HasColumnType("datetime")
                        .HasColumnName("dateSended");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("eventId");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("StatusDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("statusDesc");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "idx_SMS_notnull")
                        .IsUnique()
                        .HasFilter("([eventId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EventId" }, "idx_SMS_notnull"), 90);

                    b.ToTable("SMS", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Smstemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsAnkieta")
                        .HasColumnType("bit")
                        .HasColumnName("isAnkieta");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("SMSTemplates", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.SortVisibleCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BagsTypeId")
                        .HasColumnType("int")
                        .HasColumnName("bagsTypeId");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("columnName");

                    b.Property<int?>("ContractFilesId")
                        .HasColumnType("int")
                        .HasColumnName("contractFilesId");

                    b.Property<int?>("SortNumber")
                        .HasColumnType("int")
                        .HasColumnName("sortNumber");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContractFilesId" }, "idx_SortVisibleCases2_notnull")
                        .IsUnique()
                        .HasFilter("([contractFilesId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractFilesId" }, "idx_SortVisibleCases2_notnull"), 90);

                    b.HasIndex(new[] { "BagsTypeId" }, "idx_SortVisibleCases_notnull")
                        .IsUnique()
                        .HasFilter("([bagsTypeId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "BagsTypeId" }, "idx_SortVisibleCases_notnull"), 90);

                    b.ToTable("SortVisibleCases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.StareMiasto", b =>
                {
                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numer konta");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("stareMiasto", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Status1")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.StopyLombardowe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(14, 4)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("StopyLombardowe", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("text");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemLog", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sygnatura");

                    b.HasKey("Id");

                    b.ToTable("temp", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.TempPlaned", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<string>("PlanedText")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("planedText");

                    b.ToTable("tempPlaned", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("path");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("SNP.Domain.Entities.TmpMojeSprawy", b =>
                {
                    b.Property<DateTime?>("DataPrawomocnosci")
                        .HasColumnType("datetime")
                        .HasColumnName("dataPrawomocnosci");

                    b.Property<DateTime?>("DataWplywu")
                        .HasColumnType("datetime")
                        .HasColumnName("dataWplywu");

                    b.Property<DateTime?>("DataZakreslenia")
                        .HasColumnType("datetime")
                        .HasColumnName("dataZakreslenia");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("KwotaSporu")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("kwotaSporu");

                    b.Property<string>("RolaWsprawie")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("rolaWSprawie");

                    b.Property<string>("StanSprawy")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("stanSprawy");

                    b.Property<string>("StronyWsprawie")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("stronyWSprawie");

                    b.Property<string>("SygnaturaSprawy")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("sygnaturaSprawy");

                    b.Property<string>("SygnaturaWgPowoda")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("sygnaturaWgPowoda");

                    b.ToTable("tmpMojeSprawy", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Umowb", b =>
                {
                    b.Property<string>("DataKońcaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data końca umowy");

                    b.Property<string>("DataZawarciaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data zawarcia umowy");

                    b.Property<string>("IiiProwizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("III prowizja");

                    b.Property<string>("IlośćDniOdDatyPrzedawnienia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ilość dni od daty przedawnienia");

                    b.Property<string>("KosztZakupu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("koszt zakupu");

                    b.Property<string>("MaksymalnaZapłata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("maksymalna zapłata");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Prowizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja");

                    b.Property<string>("ProwizjaPoPrzedawnieniu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja po przedawnieniu");

                    b.Property<string>("WindykacjaZaOdsetkiBrutto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki brutto");

                    b.Property<string>("WindykacjaZaOdsetkiNetto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki netto");

                    b.ToTable("umowb", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Umowb2", b =>
                {
                    b.Property<string>("DataKońcaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data końca umowy");

                    b.Property<string>("DataZawarciaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data zawarcia umowy");

                    b.Property<string>("IiiProwizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("III prowizja");

                    b.Property<string>("IlośćDniOdDatyPrzedawnienia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ilość dni od daty przedawnienia");

                    b.Property<string>("KosztZakupu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("koszt zakupu");

                    b.Property<string>("MaksymalnaZapłata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("maksymalna zapłata");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Prowizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja");

                    b.Property<string>("ProwizjaPoPrzedawnieniu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja po przedawnieniu");

                    b.Property<string>("WindykacjaZaOdsetkiBrutto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki brutto");

                    b.Property<string>("WindykacjaZaOdsetkiNetto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki netto");

                    b.ToTable("umowb2", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Umowb2c1", b =>
                {
                    b.Property<string>("DataKońcaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data końca umowy");

                    b.Property<string>("DataZawarciaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data zawarcia umowy");

                    b.Property<string>("IiiProwizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("III prowizja");

                    b.Property<string>("IlośćDniOdDatyPrzedawnienia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ilość dni od daty przedawnienia");

                    b.Property<string>("KosztZakupu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("koszt zakupu");

                    b.Property<string>("MaksymalnaZapłata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("maksymalna zapłata");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Prowizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja");

                    b.Property<string>("ProwizjaPoPrzedawnieniu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja po przedawnieniu");

                    b.Property<string>("WindykacjaZaOdsetkiBrutto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki brutto");

                    b.Property<string>("WindykacjaZaOdsetkiNetto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki netto");

                    b.ToTable("umowb2c1", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Umowb3", b =>
                {
                    b.Property<string>("DataKońcaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data końca umowy");

                    b.Property<string>("DataZawarciaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data zawarcia umowy");

                    b.Property<string>("IiiProwizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("III prowizja");

                    b.Property<string>("IlośćDniOdDatyPrzedawnienia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ilość dni od daty przedawnienia");

                    b.Property<string>("KosztZakupu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("koszt zakupu");

                    b.Property<string>("MaksymalnaZapłata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("maksymalna zapłata");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Prowizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja");

                    b.Property<string>("ProwizjaPoPrzedawnieniu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja po przedawnieniu");

                    b.Property<string>("WindykacjaZaOdsetkiBrutto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki brutto");

                    b.Property<string>("WindykacjaZaOdsetkiNetto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki netto");

                    b.ToTable("umowb3", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Umowyb2c", b =>
                {
                    b.Property<string>("DataKońcaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data końca umowy");

                    b.Property<string>("DataZawarciaUmowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("data zawarcia umowy");

                    b.Property<string>("IiiProwizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("III prowizja");

                    b.Property<string>("IlośćDniOdDatyPrzedawnienia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ilość dni od daty przedawnienia");

                    b.Property<string>("KosztZakupu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("koszt zakupu");

                    b.Property<string>("MaksymalnaZapłata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("maksymalna zapłata");

                    b.Property<string>("Nazwa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Prowizja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja");

                    b.Property<string>("ProwizjaPoPrzedawnieniu")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prowizja po przedawnieniu");

                    b.Property<string>("WindykacjaZaOdsetkiBrutto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki brutto");

                    b.Property<string>("WindykacjaZaOdsetkiNetto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("windykacja za odsetki netto");

                    b.ToTable("umowyb2c", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("desription");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emailAddress");

                    b.Property<int?>("EmailTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("emailTemplateId");

                    b.Property<string>("EmmailPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emmailPassword");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("firstName");

                    b.Property<int?>("InDashboard")
                        .HasColumnType("int")
                        .HasColumnName("inDashboard");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("bit")
                        .HasColumnName("isSystem");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("lastName");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("PasswordDate")
                        .HasColumnType("date")
                        .HasColumnName("passwordDate");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SNP.Domain.Entities.UserConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Config")
                        .HasColumnType("xml")
                        .HasColumnName("config");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "idx_UserConfiguration_notnull")
                        .IsUnique()
                        .HasFilter("([userId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "UserId" }, "idx_UserConfiguration_notnull"), 90);

                    b.ToTable("UserConfiguration", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Warrant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int")
                        .HasColumnName("caseId");

                    b.Property<DateTime?>("ClauseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("clauseDate");

                    b.Property<int?>("DecisionCode")
                        .HasColumnType("int")
                        .HasColumnName("decisionCode");

                    b.Property<int?>("EpuId")
                        .HasColumnType("int")
                        .HasColumnName("EpuID");

                    b.Property<int?>("InterestFreeDays")
                        .HasColumnType("int")
                        .HasColumnName("interestFreeDays");

                    b.Property<decimal?>("Kos")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kos");

                    b.Property<decimal?>("Kzp")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("kzp");

                    b.Property<DateTime?>("LegitymacyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("legitymacyDate");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("number");

                    b.Property<DateTime?>("RulingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("rulingDate");

                    b.Property<string>("WarrantSignature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("warrantSignature");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WarrantSignature" }, "IX_Warrants");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "WarrantSignature" }, "IX_Warrants"), 90);

                    b.HasIndex(new[] { "Number" }, "IX_Warrants_1");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Number" }, "IX_Warrants_1"), 90);

                    b.HasIndex(new[] { "CaseId" }, "idx_Warrants_notnull")
                        .IsUnique()
                        .HasFilter("([caseId] IS NOT NULL)");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CaseId" }, "idx_Warrants_notnull"), 90);

                    b.ToTable("Warrants");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Wplaty", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.ToTable((string)null);

                    b.ToView("wplaty", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.WplatyCesje", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.ToTable((string)null);

                    b.ToView("wplaty_cesje", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.WplatyCesjePerWindykator", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.ToTable((string)null);

                    b.ToView("wplaty_cesje_per_windykator", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.WplatyZleceniaPerWindykator", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.ToTable((string)null);

                    b.ToView("wplaty_zlecenia_per_windykator", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Wysi", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Kod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KosztySądowe")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Koszty sądowe");

                    b.Property<string>("Kwota")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Miejscowość")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NazwiskoIImię")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nazwisko i imię");

                    b.Property<string>("NrElementuSprawy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nr elementu sprawy");

                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numer Konta");

                    b.Property<string>("Psygnatura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PSygnatura");

                    b.Property<string>("Ulica")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("wysi", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Yonick1", b =>
                {
                    b.Property<string>("AdresSiedziby1UlicaINumer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES SIEDZIBY1 (ULICA I NUMER)");

                    b.Property<string>("AdresSiedziby2KodPocztowyIMiasto")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES SIEDZIBY2 (KOD POCZTOWY I MIASTO)");

                    b.Property<string>("AdresSiedziby3")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES SIEDZIBY3");

                    b.Property<string>("AdresSiedziby4")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES SIEDZIBY4");

                    b.Property<string>("AdresZamieszkania1UlicaINumer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES ZAMIESZKANIA1 (ULICA I NUMER)");

                    b.Property<string>("AdresZamieszkania2KodPocztowyIMiasto")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES ZAMIESZKANIA2 (KOD POCZTOWY I MIASTO)");

                    b.Property<string>("AdresZamieszkania3")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES ZAMIESZKANIA3");

                    b.Property<string>("AdresZamieszkania4")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ADRES ZAMIESZKANIA4");

                    b.Property<string>("DataUrodzenia")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DATA URODZENIA");

                    b.Property<string>("DataWysłaniaWezwania")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DATA WYSŁANIA WEZWANIA");

                    b.Property<string>("DataZakończeniaZawieszenia")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DATA ZAKOŃCZENIA ZAWIESZENIA");

                    b.Property<string>("DrugieImię")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("DRUGIE IMIĘ");

                    b.Property<string>("Ekd")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("EKD");

                    b.Property<string>("IdentyfikatorSprawy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IDENTYFIKATOR SPRAWY");

                    b.Property<string>("IdentyfikatorZobowiązania")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IDENTYFIKATOR ZOBOWIĄZANIA");

                    b.Property<string>("Imię")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IMIĘ");

                    b.Property<string>("KwotaZadłużenia")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("KWOTA ZADŁUŻENIA");

                    b.Property<string>("NazwaFirmy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("NAZWA FIRMY");

                    b.Property<string>("Nazwisko")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("NAZWISKO");

                    b.Property<string>("Nip")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("NIP");

                    b.Property<string>("Numer")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("NUMER");

                    b.Property<string>("NumerWRejestrze")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("NUMER W REJESTRZE");

                    b.Property<string>("Obywatelstwo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("OBYWATELSTWO");

                    b.Property<string>("Operacja")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("#OPERACJA");

                    b.Property<string>("Pesel")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Regon")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("REGON");

                    b.Property<string>("RodzajDłużnika")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RODZAJ DŁUŻNIKA");

                    b.Property<string>("Seria")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SERIA");

                    b.Property<string>("SądRejestrowy")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SĄD REJESTROWY");

                    b.Property<string>("TerminWymagalności")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TERMIN WYMAGALNOŚCI");

                    b.Property<string>("TypDokumentuTożsamości")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TYP DOKUMENTU TOŻSAMOŚCI");

                    b.Property<string>("TytułZobowiązania")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TYTUŁ ZOBOWIĄZANIA");

                    b.Property<string>("Waluta")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("WALUTA");

                    b.Property<string>("WysokośćZobowiązania")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("WYSOKOŚĆ ZOBOWIĄZANIA");

                    b.ToTable("yonick1", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Zap2", b =>
                {
                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<double?>("Id")
                        .HasColumnType("float")
                        .HasColumnName("id");

                    b.Property<int?>("Id1")
                        .HasColumnType("int")
                        .HasColumnName("id1");

                    b.Property<int?>("IsReturned")
                        .HasColumnType("int")
                        .HasColumnName("isReturned");

                    b.Property<string>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("number");

                    b.Property<string>("PastPersonId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pastPersonId");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("personId");

                    b.Property<string>("Sha1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SHA1");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("Type1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type1");

                    b.ToTable("zap2", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities.Zeszyt1", b =>
                {
                    b.Property<string>("KodPocztowy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Kod pocztowy");

                    b.Property<string>("KwotaPoKomorniku")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Kwota po komorniku");

                    b.Property<string>("Miejscowość")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NazwaDłużnika")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Nazwa dłużnika");

                    b.Property<string>("NumerKonta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numer konta");

                    b.Property<string>("Pesel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PESEL");

                    b.Property<string>("SumaOdsetek")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Suma odsetek");

                    b.Property<string>("Sygnatura")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Tytułem")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("Ulica")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WPS")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W P S ");

                    b.Property<string>("WPSSumaOdsetek")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W P S  + suma odsetek");

                    b.ToTable("Zeszyt1", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities._16092019zmianaProwadzacego", b =>
                {
                    b.Property<string>("IdSprawy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ID sprawy");

                    b.Property<string>("NowyProwadzacy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nowy prowadzacy");

                    b.Property<string>("StaryProwadzacy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("stary prowadzacy");

                    b.ToTable("16092019ZmianaProwadzacego", (string)null);
                });

            modelBuilder.Entity("SNP.Domain.Entities._18092019zmianaProwadzacych", b =>
                {
                    b.Property<string>("IdSprawy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ID sprawy");

                    b.Property<string>("NowyProwadzacy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nowy prowadzacy");

                    b.Property<string>("StaryProwadzacy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("stary prowadzacy");

                    b.ToTable("18092019ZmianaProwadzacych", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SNP.Domain.Entities.Address", b =>
                {
                    b.HasOne("SNP.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_Cities");

                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("SNP.Domain.Entities.Address", "PersonId")
                        .HasConstraintName("FK_Address_Persons");

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Agreement", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("Agreements")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_Agreements_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.AssetEvent", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Event", "Events")
                        .WithMany("AssetEvents")
                        .HasForeignKey("EventsId")
                        .HasConstraintName("FK_AssetEvents_Events");

                    b.HasOne("SNP.Domain.Entities.User", "User1")
                        .WithMany("AssetEventUser1s")
                        .HasForeignKey("User1Id")
                        .HasConstraintName("FK_AssetEvents_Users");

                    b.HasOne("SNP.Domain.Entities.User", "User2")
                        .WithMany("AssetEventUser2s")
                        .HasForeignKey("User2Id")
                        .HasConstraintName("FK_AssetEvents_Users1");

                    b.Navigation("Events");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SNP.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Client", "Client")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_BankAccounts_BankAccounts");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Case", b =>
                {
                    b.HasOne("SNP.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("Cases")
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_Case_BankAccounts");

                    b.HasOne("SNP.Domain.Entities.DictStateOfCommitment", "CommitmentState")
                        .WithMany("Cases")
                        .HasForeignKey("CommitmentStateId")
                        .HasConstraintName("FK_Case_DictStateOfCommitment");

                    b.HasOne("SNP.Domain.Entities.ContratsFile", "ContractFiles")
                        .WithMany("Cases")
                        .HasForeignKey("ContractFilesId")
                        .HasConstraintName("FK_Case_ContratsFiles");

                    b.HasOne("SNP.Domain.Entities.User", "LeadingUser")
                        .WithMany("CaseLeadingUsers")
                        .HasForeignKey("LeadingUserId")
                        .HasConstraintName("FK_Case_Users");

                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithMany("Cases")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Case_Persons");

                    b.HasOne("SNP.Domain.Entities.DictCaseState", "State")
                        .WithMany("Cases")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Case_DictCaseState");

                    b.HasOne("SNP.Domain.Entities.Event", "ToDoEvents")
                        .WithMany("Cases")
                        .HasForeignKey("ToDoEventsId")
                        .HasConstraintName("FK_Case_Events");

                    b.HasOne("SNP.Domain.Entities.User", "User")
                        .WithMany("CaseUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Case_Case");

                    b.Navigation("BankAccount");

                    b.Navigation("CommitmentState");

                    b.Navigation("ContractFiles");

                    b.Navigation("LeadingUser");

                    b.Navigation("Person");

                    b.Navigation("State");

                    b.Navigation("ToDoEvents");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CasesInBag", b =>
                {
                    b.HasOne("SNP.Domain.Entities.BagsType", "BagsType")
                        .WithMany("CasesInBags")
                        .HasForeignKey("BagsTypeId")
                        .HasConstraintName("FK_CasesInBags_BagsType");

                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("CasesInBags")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_CasesInBags_Case");

                    b.Navigation("BagsType");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CasesOfListOfCase", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("CasesOfListOfCases")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_CasesOfListOfCases_Case");

                    b.HasOne("SNP.Domain.Entities.CustomListOfCase", "ListOfCases")
                        .WithMany("CasesOfListOfCases")
                        .HasForeignKey("ListOfCasesId")
                        .HasConstraintName("FK_CasesOfListOfCases_CustomListOfCases");

                    b.Navigation("Case");

                    b.Navigation("ListOfCases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Client", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Clients_Address");

                    b.HasOne("SNP.Domain.Entities.Event", "ToDoEvents")
                        .WithMany("Clients")
                        .HasForeignKey("ToDoEventsId")
                        .HasConstraintName("FK_Clients_Events");

                    b.Navigation("Address");

                    b.Navigation("ToDoEvents");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContactsDetail", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithOne("ContactsDetail")
                        .HasForeignKey("SNP.Domain.Entities.ContactsDetail", "PersonId")
                        .HasConstraintName("FK_Contacts_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContatsOfClient", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Client", "Client")
                        .WithMany("ContatsOfClients")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ContatsOfClient_Clients");

                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithOne("ContatsOfClient")
                        .HasForeignKey("SNP.Domain.Entities.ContatsOfClient", "PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_ContatsOfClient_Persons");

                    b.Navigation("Client");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Contract", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Contracts_Clients");

                    b.HasOne("SNP.Domain.Entities.Company", "Company")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Contracts_Company");

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContratsFile", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Contract", "Contract")
                        .WithMany("ContratsFiles")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK_ContratsFiles_Contracts");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CustomBagsNote", b =>
                {
                    b.HasOne("SNP.Domain.Entities.BagsType", "Bags")
                        .WithMany("CustomBagsNotes")
                        .HasForeignKey("BagsId")
                        .HasConstraintName("FK_CustomBagsNotes_BagsType");

                    b.HasOne("SNP.Domain.Entities.DictDefaultNote", "DefaultNotes")
                        .WithMany("CustomBagsNotes")
                        .HasForeignKey("DefaultNotesId")
                        .HasConstraintName("FK_CustomBagsNotes_DictDefaultNotes");

                    b.Navigation("Bags");

                    b.Navigation("DefaultNotes");
                });

            modelBuilder.Entity("SNP.Domain.Entities.DynamicalCaseParametr", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("DynamicalCaseParametrs")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_DynamicalCaseParametr_Case");

                    b.HasOne("SNP.Domain.Entities.Fine", "Fine")
                        .WithMany("DynamicalCaseParametrs")
                        .HasForeignKey("FineId")
                        .HasConstraintName("FK_DynamicalCaseParametr_Fine");

                    b.Navigation("Case");

                    b.Navigation("Fine");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Email", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithMany("Emails")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Emails_Events");

                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Emails_Persons1");

                    b.HasOne("SNP.Domain.Entities.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Emails_Users");

                    b.Navigation("Event");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EmailsAddress", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithMany("EmailsAddresses")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Emails_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Encryption", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Client", "Client")
                        .WithMany("Encryptions")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_encryption_Clients");

                    b.HasOne("SNP.Domain.Entities.EncryptionApplication", "EncrytipnAp")
                        .WithMany("Encryptions")
                        .HasForeignKey("EncrytipnApId")
                        .HasConstraintName("FK_encryption_EncryptionApplication");

                    b.Navigation("Client");

                    b.Navigation("EncrytipnAp");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EnforcementBailiff", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithOne("EnforcementBailiff")
                        .HasForeignKey("SNP.Domain.Entities.EnforcementBailiff", "CaseId")
                        .HasConstraintName("FK_EnforcementBailiff_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EpuCase", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithOne("EpuCase")
                        .HasForeignKey("SNP.Domain.Entities.EpuCase", "CaseId")
                        .HasConstraintName("FK_EpuCase_Case1");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EpuDecision", b =>
                {
                    b.HasOne("SNP.Domain.Entities.EpuCase", "EpuCase")
                        .WithMany("EpuDecisions")
                        .HasForeignKey("EpuCaseId")
                        .HasConstraintName("FK_EpuDecisions_EpuCase");

                    b.HasOne("SNP.Domain.Entities.Event", "Evant")
                        .WithOne("EpuDecision")
                        .HasForeignKey("SNP.Domain.Entities.EpuDecision", "EvantId")
                        .HasConstraintName("FK_EpuDecisions_Events");

                    b.Navigation("EpuCase");

                    b.Navigation("Evant");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Event", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("Events")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_Events_Case");

                    b.HasOne("SNP.Domain.Entities.Client", "Client")
                        .WithMany("Events")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Events_Clients");

                    b.HasOne("SNP.Domain.Entities.AssetEvent", "LastAssetNavigation")
                        .WithMany("EventsNavigation")
                        .HasForeignKey("LastAsset")
                        .HasConstraintName("FK_Events_AssetEvents");

                    b.Navigation("Case");

                    b.Navigation("Client");

                    b.Navigation("LastAssetNavigation");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EventsForInvoice", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithMany("EventsForInvoices")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventsForInvoice_Events");

                    b.HasOne("SNP.Domain.Entities.Invoice", "Invoice")
                        .WithMany("EventsForInvoices")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_EventsForInvoice_Invoices");

                    b.Navigation("Event");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EventsOfAgrement", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Agreement", "Agrrement")
                        .WithMany("EventsOfAgrements")
                        .HasForeignKey("AgrrementId")
                        .HasConstraintName("FK_EventsOfAgrement_Agreements");

                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithMany("EventsOfAgrements")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventsOfAgrement_Events");

                    b.Navigation("Agrrement");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SNP.Domain.Entities.File", b =>
                {
                    b.HasOne("SNP.Domain.Entities.FileType", "FileType")
                        .WithMany("Files")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_Files_FileTypes");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfCase", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("FilesOfCases")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_FilesOfCase_Case");

                    b.HasOne("SNP.Domain.Entities.File", "File")
                        .WithMany("FilesOfCases")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_FilesOfCase_Files");

                    b.Navigation("Case");

                    b.Navigation("File");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfClient", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Client", "Client")
                        .WithMany("FilesOfClients")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_FilesOfClient_Clients");

                    b.HasOne("SNP.Domain.Entities.File", "Files")
                        .WithMany("FilesOfClients")
                        .HasForeignKey("FilesId")
                        .HasConstraintName("FK_FilesOfClient_Files");

                    b.Navigation("Client");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfEent", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithMany("FilesOfEents")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_FilesOfEents_Events");

                    b.HasOne("SNP.Domain.Entities.File", "File")
                        .WithMany("FilesOfEents")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_FilesOfEents_Files");

                    b.Navigation("Event");

                    b.Navigation("File");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FilesOfEmail", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Email", "Email")
                        .WithMany("FilesOfEmails")
                        .HasForeignKey("EmailId")
                        .HasConstraintName("FK_FilesOfEmails_Emails");

                    b.HasOne("SNP.Domain.Entities.File", "Files")
                        .WithMany("FilesOfEmails")
                        .HasForeignKey("FilesId")
                        .HasConstraintName("FK_FilesOfEmails_Files");

                    b.Navigation("Email");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Fine", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("Fines")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_Fine_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Gapowicze", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("Gapowiczes")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_gapowicze_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Contract", "Contrat")
                        .WithMany("Invoices")
                        .HasForeignKey("ContratId")
                        .HasConstraintName("FK_Invoices_Contracts");

                    b.Navigation("Contrat");
                });

            modelBuilder.Entity("SNP.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Invoice", "Inoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InoiceId")
                        .HasConstraintName("FK_InvoiceItems_Invoices");

                    b.Navigation("Inoice");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Krd", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("Krds")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_KRDNew_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.KrdOld", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("KrdOlds")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_KRD_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Payment", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithOne("Payment")
                        .HasForeignKey("SNP.Domain.Entities.Payment", "EventId")
                        .HasConstraintName("FK_Payments_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SNP.Domain.Entities.PaymentsForFine", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Fine", "Fine")
                        .WithMany("PaymentsForFines")
                        .HasForeignKey("FineId")
                        .HasConstraintName("FK_PaymentsForFine_Fine");

                    b.HasOne("SNP.Domain.Entities.Payment", "Payments")
                        .WithMany("PaymentsForFines")
                        .HasForeignKey("PaymentsId")
                        .HasConstraintName("FK_PaymentsForFine_Payments");

                    b.Navigation("Fine");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Person", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Person", "PastPerson")
                        .WithMany("InversePastPerson")
                        .HasForeignKey("PastPersonId")
                        .HasConstraintName("FK_Persons_Persons");

                    b.Navigation("PastPerson");
                });

            modelBuilder.Entity("SNP.Domain.Entities.PhoneNumber", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_PhoneNumbers_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Pko", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_PKOes_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Postanowienium", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("Postanowienia")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_Postanowienia_Case");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.RequestsCase", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithMany("RequestsCases")
                        .HasForeignKey("CaseId")
                        .HasConstraintName("FK_RequestsCase_RequestsCase");

                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithOne("RequestsCase")
                        .HasForeignKey("SNP.Domain.Entities.RequestsCase", "EventId")
                        .HasConstraintName("FK_RequestsCase_Events");

                    b.HasOne("SNP.Domain.Entities.RequestsPayment", "RequestPayments")
                        .WithMany("RequestsCases")
                        .HasForeignKey("RequestPaymentsId")
                        .HasConstraintName("FK_RequestsCase_RequestsPayments");

                    b.Navigation("Case");

                    b.Navigation("Event");

                    b.Navigation("RequestPayments");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Sm", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Event", "Event")
                        .WithOne("Sm")
                        .HasForeignKey("SNP.Domain.Entities.Sm", "EventId")
                        .HasConstraintName("FK_SMS_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("SNP.Domain.Entities.SortVisibleCase", b =>
                {
                    b.HasOne("SNP.Domain.Entities.BagsType", "BagsType")
                        .WithOne("SortVisibleCase")
                        .HasForeignKey("SNP.Domain.Entities.SortVisibleCase", "BagsTypeId")
                        .HasConstraintName("FK_SortVisibleCases_BagsType");

                    b.HasOne("SNP.Domain.Entities.ContratsFile", "ContractFiles")
                        .WithOne("SortVisibleCase")
                        .HasForeignKey("SNP.Domain.Entities.SortVisibleCase", "ContractFilesId")
                        .HasConstraintName("FK_SortVisibleCases_ContratsFiles");

                    b.Navigation("BagsType");

                    b.Navigation("ContractFiles");
                });

            modelBuilder.Entity("SNP.Domain.Entities.SystemLog", b =>
                {
                    b.HasOne("SNP.Domain.Entities.User", "User")
                        .WithMany("SystemLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SystemLog_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNP.Domain.Entities.UserConfiguration", b =>
                {
                    b.HasOne("SNP.Domain.Entities.User", "User")
                        .WithOne("UserConfiguration")
                        .HasForeignKey("SNP.Domain.Entities.UserConfiguration", "UserId")
                        .HasConstraintName("FK_UserConfiguration_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Warrant", b =>
                {
                    b.HasOne("SNP.Domain.Entities.Case", "Case")
                        .WithOne("Warrant")
                        .HasForeignKey("SNP.Domain.Entities.Warrant", "CaseId")
                        .HasConstraintName("FK_Warrants_Warrants");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Address", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Agreement", b =>
                {
                    b.Navigation("EventsOfAgrements");
                });

            modelBuilder.Entity("SNP.Domain.Entities.AssetEvent", b =>
                {
                    b.Navigation("EventsNavigation");
                });

            modelBuilder.Entity("SNP.Domain.Entities.BagsType", b =>
                {
                    b.Navigation("CasesInBags");

                    b.Navigation("CustomBagsNotes");

                    b.Navigation("SortVisibleCase");
                });

            modelBuilder.Entity("SNP.Domain.Entities.BankAccount", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Case", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("CasesInBags");

                    b.Navigation("CasesOfListOfCases");

                    b.Navigation("DynamicalCaseParametrs");

                    b.Navigation("EnforcementBailiff");

                    b.Navigation("EpuCase");

                    b.Navigation("Events");

                    b.Navigation("FilesOfCases");

                    b.Navigation("Fines");

                    b.Navigation("Gapowiczes");

                    b.Navigation("KrdOlds");

                    b.Navigation("Krds");

                    b.Navigation("Postanowienia");

                    b.Navigation("RequestsCases");

                    b.Navigation("Warrant");
                });

            modelBuilder.Entity("SNP.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Client", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("ContatsOfClients");

                    b.Navigation("Contracts");

                    b.Navigation("Encryptions");

                    b.Navigation("Events");

                    b.Navigation("FilesOfClients");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Company", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Contract", b =>
                {
                    b.Navigation("ContratsFiles");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("SNP.Domain.Entities.ContratsFile", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("SortVisibleCase");
                });

            modelBuilder.Entity("SNP.Domain.Entities.CustomListOfCase", b =>
                {
                    b.Navigation("CasesOfListOfCases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictCaseState", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictDefaultNote", b =>
                {
                    b.Navigation("CustomBagsNotes");
                });

            modelBuilder.Entity("SNP.Domain.Entities.DictStateOfCommitment", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Email", b =>
                {
                    b.Navigation("FilesOfEmails");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EncryptionApplication", b =>
                {
                    b.Navigation("Encryptions");
                });

            modelBuilder.Entity("SNP.Domain.Entities.EpuCase", b =>
                {
                    b.Navigation("EpuDecisions");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Event", b =>
                {
                    b.Navigation("AssetEvents");

                    b.Navigation("Cases");

                    b.Navigation("Clients");

                    b.Navigation("Emails");

                    b.Navigation("EpuDecision");

                    b.Navigation("EventsForInvoices");

                    b.Navigation("EventsOfAgrements");

                    b.Navigation("FilesOfEents");

                    b.Navigation("Payment");

                    b.Navigation("RequestsCase");

                    b.Navigation("Sm");
                });

            modelBuilder.Entity("SNP.Domain.Entities.File", b =>
                {
                    b.Navigation("FilesOfCases");

                    b.Navigation("FilesOfClients");

                    b.Navigation("FilesOfEents");

                    b.Navigation("FilesOfEmails");
                });

            modelBuilder.Entity("SNP.Domain.Entities.FileType", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Fine", b =>
                {
                    b.Navigation("DynamicalCaseParametrs");

                    b.Navigation("PaymentsForFines");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("EventsForInvoices");

                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Payment", b =>
                {
                    b.Navigation("PaymentsForFines");
                });

            modelBuilder.Entity("SNP.Domain.Entities.Person", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cases");

                    b.Navigation("ContactsDetail");

                    b.Navigation("ContatsOfClient");

                    b.Navigation("Emails");

                    b.Navigation("EmailsAddresses");

                    b.Navigation("InversePastPerson");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("SNP.Domain.Entities.RequestsPayment", b =>
                {
                    b.Navigation("RequestsCases");
                });

            modelBuilder.Entity("SNP.Domain.Entities.User", b =>
                {
                    b.Navigation("AssetEventUser1s");

                    b.Navigation("AssetEventUser2s");

                    b.Navigation("CaseLeadingUsers");

                    b.Navigation("CaseUsers");

                    b.Navigation("Emails");

                    b.Navigation("SystemLogs");

                    b.Navigation("UserConfiguration");
                });
#pragma warning restore 612, 618
        }
    }
}
